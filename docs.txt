byte code:

10xxxxxx == 0x80 push variable (xxxxxx - index)
11xxxxxx == 0xc0 pop var (xxxxxx - index)
00xxxxxx any one byte command
0100xxxx == 0x40 xxxxxxxx call (10 bytes address value)
0101xxxx == 0x50 xxxxxxxx goto
0110xxxx == 0x60 xxxxxxxx jump if zero
0111xxxx free for use... 

public enum CommandTypes
{
	ERROR_,

	ADD, SUB, MUL, DIV, NEG,

	SIN, COS, EXP, SQRT, POW, ABS,

	LOOP, DELAY, TIME, RND, RET, END,

	GREATER, LOWER, EQ, NEQ,

	SET_RGB, SET_GAMMA,

	PUSH_BYTE, PUSH_SHORT, PUSH_INT, PUSH_FLOAT,

	SHLEFT, SHRIGHT,

	GET_R, GET_G, GET_B,

	MEM_SET, MEM_GET,

	MOD,
}


language specs

// variables and arrays

identifier = value; // declaration and assignement float value
array identifier[size]; // declaration array.

// keywords
loop; // code before 'loop' will execute at start. code after 'loop' will execute every frame.
end; // normal stop execution point

call label_identifier;
goto label_identifier;

label_identifirer:;
ret;

if expression then
endif;

while expression do
repeat;


// functions

float rnd() // returns pseudo random float value from 0 to 1
delay(millicesonds)

gamma(float gammaValue)

sin, cos, exp, sqrt, pow(x, y), abs,
mod(10.25) == 0.25;

get[rgb](pos) // from 0 to 255 [rgb] color component value
set(pos, r, g, b)





transfer protocol

expected on reciever size:

1. recv one byte (block lenght)
2. recv lenght bytes (data)
3. send one byte(xor data byte)

last block lenght == 0;



