that is only wtat i want.
now is other scecification. soo simple.

float get(x, y)
{
	float z;
	z = x + y;
	return z * 2;
}

call form:

    push_prog_position;
	push_stack_position;
	variable_position = stack_position;
	push_expression_results;
	push_local_variables;
	
	function bytecode
		push v0;
		push v1;
		add;
		pop v2;
		push v2;
		push 2
		mul;
	
	return:
		stack_position = variable_position
		pop_variable_position;
		pop_prog_position;
		
		
		
	
	
	 


call opcode params count

structure

	void identifier(int identifier, ..., float identifier){}	
	int identifier(...){}
	float identifier(...){}
	void main(void){}
	
	prog ::= function {function};
	function ::= type identifier '(' params ')' '{' function_body '}'
	params ::= one_param {, one_param};
	one_param ::= type identifier;
	
	function_body ::= variables blocks;

	variables ::= variable{variable}
	variable ::= type identifier [= expression];
	
	blocks ::= block{block}
	block ::= (keyword|system_function;|variable=expression;)
		
	keyword ::= if | while | for | return
	if ::= '(' expression ')' '{' blocks '}' [else '{' blocks '}']
		
	while ::= '(' expression ')' '{' blocks '}'
		
	for ::= '(' blocks ';' expression ';' blocks ')' '{' blocks '}'
	
	expression ::= logic { ('&&'|'||') logic }
	logik_term ::= bits { '|' | '&' | '^'   bits}
	bits_term ::= relation { '<' | '>' relation }
	relation ::= summ { '+' | '-' summ }
	summ ::= mult { '*' | '/' mult }
	mult ::= [unary_prefix] (const|variable|'('expression')'|'system_function))
	
		

functions

	float sin(float);
	float cos(float);
	float pow(float value, float exponent);
	float exp(float);
	float abs(float);
	float sqrt(float);
	
	void delay(milliseconds); 
	 
	float time(); // time in seconds (based from micros arduino function)
	float rnd(); // return float value from [0 to 1)
	
	void clear(int r, int g, int b);
	void set(int x, int r, int g, int b);
	int get(int x, int c);
		
	